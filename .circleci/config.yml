version: 2.1


orbs:
  snyk: snyk/snyk@0.0.9


executors:
  python-js:
    docker:
      - image: circleci/python:3.7-node-browsers
    working_directory: ~/project


jobs:
  install:
    executor: python-js
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ checksum "Pipfile.lock" }}-{{ checksum "package-lock.json" }}
      - run:
          name: install dependencies
          command: pipenv install --dev && npm install
      - save_cache:
          key: deps-{{ checksum "Pipfile.lock" }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/.local/share/virtualenvs
            - ./node_modules
      - persist_to_workspace:
          root: "~"
          paths:
              - .local/share/virtualenvs
              - project/node_modules
              - project

  # needs $SNYK_TOKEN from https://app.snyk.io/account/
  security-scan:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - snyk/scan:
          organization: honzajavorek
          project: junior.guru
          monitor-on-build: true
          target-file: package.json
      - snyk/scan:
          organization: honzajavorek
          project: junior.guru
          monitor-on-build: true
          target-file: Pipfile

  test:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: pipenv run test -v

  scrapers:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: pipenv run scrape
      - run: tar -cvzf jobs.tar.gz ./jobs
      - store_artifacts:
          path: ./jobs.tar.gz

  # needs $GOOGLE_SERVICE_ACCOUNT
  fetch-build:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: pipenv run fetch && pipenv run build
      - persist_to_workspace:
          root: "~"
          paths:
              - project/juniorguru/data
              - project/public
      - run: tar -cvzf public.tar.gz ./public
      - store_artifacts:
          path: ./public.tar.gz

  # needs $NOW_TOKEN, $NOW_ORG_ID, $NOW_PROJECT_ID
  deploy:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - restore_cache:
          key: deploy-{{ .Revision }}
      - run:
          name: deploy
          command: |
            if [[ -f .deploy ]]; then
              echo "Looks like the build has been triggered by CircleCI (nightly, retries). Deploying with ZEIT Now CLI."
              sudo npm install --global --unsafe-perm now
              now --prod -t "$NOW_TOKEN"
            else
              echo "Looks like the build has been triggered by GitHub (there are no previous 'deploy' jobs for this commit). Skipping duplicate deploy with ZEIT Now CLI."
              echo "$CIRCLE_SHA1" > .deploy
            fi
      - save_cache:
          key: deploy-{{ .Revision }}
          paths:
            - .deploy

  check-anchors:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: pipenv run check-anchors

  check-links:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: pipenv run check-links --retry


workflows:
  version: 2

  default_workflow:
    jobs:
      - install
      - test:
          requires:
            - install
      - scrapers:
          requires:
            - install
      - fetch-build:
          requires:
            - install
      - check-anchors:
          requires:
            - fetch-build
      - deploy:
          # This makes sure retries of 'master' builds still deploy,
          # even though they were not initiated by a GitHub push. Might
          # cause double deploy for builds initiated by GitHub push, but
          # Now should recognize they're the same.
          filters:
            branches:
              only:
                - master
          requires:
            - fetch-build

  nightly_workflow:
    jobs:
      - install
      - security-scan:
          requires:
            - install
      - fetch-build:
          requires:
            - install
      - deploy:
          requires:
            - fetch-build
      - check-links:
          requires:
            - fetch-build
    triggers:
      - schedule:
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - master
